{"/home/travis/build/npmtest/node-npmtest-serve/test.js":"/* istanbul instrument in package npmtest_serve */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-serve/lib.npmtest_serve.js":"/* istanbul instrument in package npmtest_serve */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_serve = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_serve = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-serve/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-serve && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_serve */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_serve\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_serve.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_serve.rollup.js'] =\n            local.assetsDict['/assets.npmtest_serve.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_serve.__dirname + '/lib.npmtest_serve.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-serve/node_modules/serve/lib/api.js":"// Native\nconst { spawn } = require('child_process');\nconst path = require('path');\n\n// Packages\nconst dargs = require('dargs');\n\nmodule.exports = (directory = process.cwd(), options = {}) => {\n  const scriptPath = path.join(__dirname, '..', 'bin', 'serve.js');\n  const aliases = { cors: 'o' };\n\n  options._ = [directory]; // Let dargs handle the directory argument\n\n  // The CLI only understands comma-separated values for ignored files\n  // So we join the string array with commas\n  if (options.ignore) {\n    options.ignore = options.ignore.join(',');\n  }\n\n  const args = [scriptPath, ...dargs(options, { aliases })];\n\n  const cli = spawn('node', args, {\n    stdio: 'inherit'\n  });\n\n  return {\n    stop() {\n      cli.kill();\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-serve/node_modules/serve/bin/serve.js":"#!/usr/bin/env node\n\n// Native\nconst path = require('path');\n\n// Packages\nconst micro = require('micro');\nconst args = require('args');\nconst compress = require('micro-compress');\nconst detect = require('detect-port');\nconst { coroutine } = require('bluebird');\nconst updateNotifier = require('update-notifier');\nconst { red } = require('chalk');\nconst nodeVersion = require('node-version');\n\n// Ours\nconst pkg = require('../package');\nconst listening = require('../lib/listening');\nconst serverHandler = require('../lib/server');\n\n// Throw an error if node version is too low\nif (nodeVersion.major < 6) {\n  console.error(\n    `${red('Error!')} Serve requires at least version 6 of Node. Please upgrade!`\n  );\n  process.exit(1);\n}\n\n// Let user know if there's an update\n// This isn't important when deployed to production\nif (process.env.NODE_ENV !== 'production' && pkg.dist) {\n  updateNotifier({ pkg }).notify();\n}\n\nargs\n  .option('port', 'Port to listen on', process.env.PORT || 5000)\n  .option(\n    'cache',\n    'Time in milliseconds for caching files in the browser',\n    3600\n  )\n  .option('single', 'Serve single page apps with only one index.html')\n  .option('unzipped', 'Disable GZIP compression')\n  .option('ignore', 'Files and directories to ignore')\n  .option('auth', 'Serve behind basic auth')\n  .option(\n    'cors',\n    'Setup * CORS headers to allow requests from any origin',\n    false\n  )\n  .option('silent', `Don't log anything to the console`)\n  .option('no-clipboard', `Don't copy address to clipboard`, false);\n\nconst flags = args.parse(process.argv, {\n  minimist: {\n    alias: {\n      a: 'auth',\n      C: 'cors',\n      S: 'silent',\n      s: 'single',\n      u: 'unzipped',\n      n: 'no-clipboard'\n    },\n    boolean: ['auth', 'cors', 'silent', 'single', 'unzipped', 'no-clipboard']\n  }\n});\n\nconst directory = args.sub[0];\n\n// Don't log anything to the console if silent mode is enabled\nif (flags.silent) {\n  console.log = () => {};\n}\n\nprocess.env.ASSET_DIR = '/' + Math.random().toString(36).substr(2, 10);\n\nlet current = process.cwd();\n\nif (directory) {\n  current = path.resolve(process.cwd(), directory);\n}\n\nlet ignoredFiles = ['.DS_Store', '.git/'];\n\nif (flags.ignore && flags.ignore.length > 0) {\n  ignoredFiles = ignoredFiles.concat(flags.ignore.split(','));\n}\n\nconst handler = coroutine(function*(req, res) {\n  yield serverHandler(req, res, flags, current, ignoredFiles);\n});\n\nconst server = flags.unzipped ? micro(handler) : micro(compress(handler));\nlet port = flags.port;\n\ndetect(port).then(open => {\n  let inUse = open !== port;\n\n  if (inUse) {\n    port = open;\n\n    inUse = {\n      old: flags.port,\n      open\n    };\n  }\n\n  server.listen(\n    port,\n    coroutine(function*() {\n      yield listening(server, current, inUse, flags.noClipboard !== true);\n    })\n  );\n});\n","/home/travis/build/npmtest/node-npmtest-serve/node_modules/serve/lib/listening.js":"// Native\nconst { basename } = require('path');\n\n// Packages\nconst { write: copy } = require('clipboardy');\nconst ip = require('ip');\nconst pathType = require('path-type');\nconst chalk = require('chalk');\nconst boxen = require('boxen');\nconst { coroutine } = require('bluebird');\n\nmodule.exports = coroutine(function*(server, current, inUse, clipboard) {\n  const details = server.address();\n  const isTTY = process.stdout.isTTY;\n\n  process.on('SIGINT', () => {\n    server.close();\n    process.exit(0);\n  });\n\n  let isDir;\n\n  try {\n    isDir = yield pathType.dir(current);\n  } catch (err) {\n    isDir = false;\n  }\n\n  if (!isDir) {\n    const base = basename(current);\n\n    console.error(\n      chalk.red(`Specified directory ${chalk.bold(`\"${base}\"`)} doesn't exist!`)\n    );\n\n    // eslint-disable-next-line unicorn/no-process-exit\n    process.exit(1);\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    let message = chalk.green('Serving!');\n\n    if (inUse) {\n      message += ' ' +\n        chalk.red(\n          `(on port ${inUse.open}, because ${inUse.old} is already in use)`\n        );\n    }\n\n    message += '\\n\\n';\n\n    const localURL = `http://localhost:${details.port}`;\n    message += `- ${chalk.bold('Local:           ')} ${localURL}`;\n\n    try {\n      const ipAddress = ip.address();\n      const url = `http://${ipAddress}:${details.port}`;\n\n      message += `\\n- ${chalk.bold('On Your Network: ')} ${url}`;\n    } catch (err) {}\n\n    if (isTTY && clipboard) {\n      try {\n        yield copy(localURL);\n        message += `\\n\\n${chalk.grey('Copied local address to clipboard!')}`;\n      } catch (err) {}\n    }\n\n    console.log(\n      boxen(message, {\n        padding: 1,\n        borderColor: 'green',\n        margin: 1\n      })\n    );\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-serve/node_modules/serve/lib/server.js":"// Native\nconst path = require('path');\nconst { parse, format } = require('url');\n\n// Packages\nconst micro = require('micro');\nconst auth = require('basic-auth');\nconst { red } = require('chalk');\nconst fs = require('fs-promise');\nconst pathType = require('path-type');\nconst mime = require('mime-types');\nconst stream = require('send');\nconst { coroutine } = require('bluebird');\n\n// Ours\nconst renderDirectory = require('./render');\n\nmodule.exports = coroutine(function*(req, res, flags, current, ignoredFiles) {\n  const headers = {};\n\n  if (flags.cors) {\n    headers['Access-Control-Allow-Origin'] = '*';\n    headers[\n      'Access-Control-Allow-Headers'\n    ] = 'Origin, X-Requested-With, Content-Type, Accept, Range';\n  }\n\n  for (const header in headers) {\n    if (!{}.hasOwnProperty.call(headers, header)) {\n      continue;\n    }\n\n    res.setHeader(header, headers[header]);\n  }\n\n  if (flags.auth) {\n    const credentials = auth(req);\n\n    if (!process.env.SERVE_USER || !process.env.SERVE_PASSWORD) {\n      console.error(\n        red(\n          'You are running serve with basic auth but did not set the SERVE_USER and SERVE_PASSWORD environment variables.'\n        )\n      );\n\n      // eslint-disable-next-line unicorn/no-process-exit\n      process.exit(1);\n    }\n\n    if (\n      !credentials ||\n      credentials.name !== process.env.SERVE_USER ||\n      credentials.pass !== process.env.SERVE_PASSWORD\n    ) {\n      res.statusCode = 401;\n      res.setHeader('WWW-Authenticate', 'Basic realm=\"User Visible Realm\"');\n      return micro.send(res, 401, 'Access Denied');\n    }\n  }\n\n  const { pathname } = parse(req.url);\n  const assetDir = path.normalize(process.env.ASSET_DIR);\n\n  let related = path.parse(path.join(current, pathname));\n\n  if (related.dir.indexOf(assetDir) > -1) {\n    const relative = path.relative(assetDir, pathname);\n    related = path.parse(path.join(__dirname, '/../assets', relative));\n  }\n\n  related = decodeURIComponent(path.format(related));\n\n  const relatedExists = fs.existsSync(related);\n  let notFoundResponse = 'Not Found';\n\n  try {\n    const custom404Path = path.join(current, '/404.html');\n    notFoundResponse = yield fs.readFile(custom404Path, 'utf-8');\n  } catch (err) {}\n\n  if (!relatedExists && flags.single === undefined) {\n    return micro.send(res, 404, notFoundResponse);\n  }\n\n  const streamOptions = {};\n\n  if (flags.cache) {\n    streamOptions.maxAge = flags.cache;\n  }\n\n  // Check if directory\n  if (relatedExists && pathType.dirSync(related)) {\n    // Normalize path to trailing slash\n    // Otherwise problems like #70 will occur\n    const url = parse(req.url);\n\n    if (url.pathname.substr(-1) !== '/') {\n      url.pathname += '/';\n      const newPath = format(url);\n\n      res.writeHead(302, {\n        Location: newPath\n      });\n\n      res.end();\n      return;\n    }\n\n    let indexPath = path.join(related, '/index.html');\n    res.setHeader('Content-Type', mime.contentType(path.extname(indexPath)));\n\n    if (!fs.existsSync(indexPath)) {\n      // Try to render the current directory's content\n      const port = flags.port || req.socket.localPort;\n      const renderedDir = yield renderDirectory(\n        port,\n        current,\n        related,\n        ignoredFiles\n      );\n\n      // If it works, send the directory listing to the user\n      if (renderedDir) {\n        return micro.send(res, 200, renderedDir);\n      }\n\n      // And if it doesn't, see if it's a single page application\n      // If that's not true either, send an error\n      if (!flags.single) {\n        return micro.send(res, 404, notFoundResponse);\n      }\n\n      // But IF IT IS true, load the SPA's root index file\n      indexPath = path.join(current, '/index.html');\n    }\n\n    return stream(req, indexPath, streamOptions).pipe(res);\n  }\n\n  if (!fs.existsSync(related) && flags.single) {\n    const indexPath = path.join(current, '/index.html');\n    return stream(req, indexPath, streamOptions).pipe(res);\n  }\n\n  // Serve files without a mime type as text\n  // eslint-disable-next-line camelcase\n  stream.mime.default_type = 'text/plain';\n\n  return stream(\n    req,\n    related,\n    Object.assign(\n      {\n        dotfiles: 'allow'\n      },\n      streamOptions\n    )\n  ).pipe(res);\n});\n","/home/travis/build/npmtest/node-npmtest-serve/node_modules/serve/lib/render.js":"// Native\nconst path = require('path');\n\n// Packages\nconst pathType = require('path-type');\nconst filesize = require('filesize');\nconst fs = require('fs-promise');\nconst { coroutine } = require('bluebird');\n\n// Ours\nconst prepareView = require('./view');\n\nmodule.exports = coroutine(function*(port, current, dir, ignoredFiles) {\n  let files = [];\n  const subPath = path.relative(current, dir);\n\n  if (!fs.existsSync(dir)) {\n    return false;\n  }\n\n  try {\n    files = yield fs.readdir(dir);\n  } catch (err) {\n    throw err;\n  }\n\n  for (const file of files) {\n    const filePath = path.resolve(dir, file);\n    const index = files.indexOf(file);\n    const details = path.parse(filePath);\n\n    details.relative = path.join(subPath, details.base);\n\n    if (yield pathType.dir(filePath)) {\n      details.base += '/';\n    } else {\n      details.ext = details.ext.split('.')[1] || 'txt';\n\n      let fileStats;\n\n      try {\n        fileStats = yield fs.stat(filePath);\n      } catch (err) {\n        throw err;\n      }\n\n      details.size = filesize(fileStats.size, { round: 0 });\n    }\n\n    details.title = details.base;\n\n    if (ignoredFiles.indexOf(details.base) > -1) {\n      delete files[index];\n    } else {\n      files[files.indexOf(file)] = details;\n    }\n  }\n\n  const directory = path.join(path.basename(current), subPath, '/');\n  const pathParts = directory.split(path.sep);\n\n  if (dir.indexOf(current + '/') > -1) {\n    const directoryPath = [...pathParts];\n    directoryPath.shift();\n\n    files.unshift({\n      base: '..',\n      relative: path.join(...directoryPath, '..'),\n      title: path.join(...pathParts.slice(0, -2), '/')\n    });\n  }\n\n  const render = prepareView();\n\n  const paths = [];\n  pathParts.pop();\n\n  for (const part in pathParts) {\n    if (!{}.hasOwnProperty.call(pathParts, part)) {\n      continue;\n    }\n\n    let before = 0;\n    const parents = [];\n\n    while (before <= part) {\n      parents.push(pathParts[before]);\n      before++;\n    }\n\n    parents.shift();\n\n    paths.push({\n      name: pathParts[part],\n      url: parents.join('/')\n    });\n  }\n\n  const details = {\n    port,\n    files,\n    assetDir: process.env.ASSET_DIR,\n    directory,\n    nodeVersion: process.version.split('v')[1],\n    paths\n  };\n\n  return render(details);\n});\n","/home/travis/build/npmtest/node-npmtest-serve/node_modules/serve/lib/view.js":"// Native\nconst path = require('path');\n\n// Packages\nconst fs = require('fs-promise');\nconst { compile } = require('handlebars');\n\nmodule.exports = () => {\n  let viewContent = false;\n  const viewPath = path.normalize(path.join(__dirname, '/../views/index.hbs'));\n\n  try {\n    viewContent = fs.readFileSync(viewPath, 'utf8');\n  } catch (err) {\n    throw err;\n  }\n\n  return compile(viewContent);\n};\n"}